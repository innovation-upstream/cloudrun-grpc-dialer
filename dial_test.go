package dialer

import (
	"testing"
	"testing/quick"
)

const (
	cloudrunID     = "testID"
	cloudrunRegion = "testRegion"
	port           = "testPort"
)

// Generated By GPT3
func TestCloudrunGRPCDialerGetCloudrunEndPointForService(c *testing.T) {
	err := quick.Check(func(label CloudrunServiceName) bool {
		l := &cloudrunGRPCDialer{
			cloudrunID:     cloudrunID,
			cloudrunRegion: cloudrunRegion,
			port:           port,
		}
		ep := l.getCloudrunEndPointForService(label)
		expect := string(label) + "-" + l.cloudrunID + "-" + l.cloudrunRegion + ".run.app:" + l.port

		return ep.RpcEndpoint == expect
	}, nil)
	if err != nil {
		c.Error(err)
	}
}

func TestGetEndpointForService(t *testing.T) {
	f := func(label CloudrunServiceName, isCloudrunEnv bool) bool {
		opts := []cloudrunGRPCDialerOption{
			func(d *cloudrunGRPCDialer) *cloudrunGRPCDialer {
				d.isCloudrunEnv = isCloudrunEnv
				return d
			},
		}

		l := NewCloudrunGRPCDialer(cloudrunID, cloudrunRegion, opts...).(*cloudrunGRPCDialer)
		endpoint := l.getEndpointForService(label)
		if isCloudrunEnv {
			return endpoint == l.getCloudrunEndPointForService(label)
		} else {
			return endpoint == l.getDevEnvEndpointForServiceFn(label)
		}
	}

	if err := quick.Check(f, nil); err != nil {
		t.Error(err)
	}
}
